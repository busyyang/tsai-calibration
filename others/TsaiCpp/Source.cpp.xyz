#include "TsaiCalibration.h.xyzh"




void main()
{

    double image_w = 1024;
    double image_h = 1024;
    // 内参
    double f = 1011;
    double dx = 0.209, dy = 0.209;
    double u0 = 505, v0 = 509.1;

    // 外参
    double rx = 0.001;
    double ry = -0.001;
    double rz = 0.002;

    double tx = 10;
    double ty = -10;
    double tz = 950;

    // 畸变参数
    double k1 = 5;
    double k2 = 100;
    double p1 = -0.01;
    double p2 = -0.01;
    double s1 = -0.02;
    double s3 = 0.01;

    cv::Mat camera_matrix = (cv::Mat_<double>(3, 3) << f / dx, 0, u0, 0, f / dy, v0, 0, 0, 1);
    cv::Mat camera_matrix_undistortion = (cv::Mat_<double>(3, 3) << f / dx, 0, (image_w - 1.0) / 2, 0, f / dy, (image_h - 1.0) / 2, 0, 0, 1);
    cv::Mat rotation = TsaiCalibration::Angle2RotationMat(rx, ry, rz);
    cv::Mat rvec = (cv::Mat_<double>(3, 1) << rz, ry, rz);
    cv::Mat translation = (cv::Mat_<double>(3, 1) << tx, ty, tz);

    // k1,k2,p1,p2,k3,k4,k5,k6,s1,s2,s3,s4
    cv::Mat distortion_coeff = (cv::Mat_<double>(12, 1) << k1, k2, p1, p2, 0, 0, 0, 0, s1, 0, s3, 0);

    std::vector<cv::Vec3d> points3D =
    {
#include "marker3d.data"
    };

    std::vector<cv::Vec2d> points2D;
    cv::projectPoints(points3D, rvec, translation, camera_matrix, distortion_coeff, points2D);
    
    cv::Mat distort_image = cv::Mat(image_h, image_w, CV_8UC3,cv::Scalar::all(255));
    for (size_t i = 0; i < points2D.size(); i++)
    {
        cv::circle(distort_image, cv::Point(points2D[i]), 10, cv::Scalar(0, 0, 255), 2);
    }

    for (size_t i = 0; i < 10; i++)
    {
        cv::line(distort_image, cv::Point(0, i * image_h / 10), cv::Point(image_w, i* image_h / 10), cv::Scalar::all(50));
        cv::line(distort_image, cv::Point(i * image_w / 10, 0), cv::Point(i* image_w / 10, image_h), cv::Scalar::all(50));
    }
    cv::imwrite("distort_image.png", distort_image);

    if (1)
    {
        TsaiCalibration tsai3;
        tsai3.SetImageSize(image_w, image_h);
        tsai3.Setf(f);
        tsai3.SetPoints2D(points2D);
        tsai3.SetPoints3D(points3D);

        if (!tsai3.Execute(TsaiCalibration::ThreeStepOptimation))
        {
            std::cout << "Errors when Three StepOptimization!" << std::endl;
            exit(-1);
        }
        double e = tsai3.GetProjectionError();
        std::cout << tsai3.GetCalibratedParameters() << std::endl;

        cv::Mat undistored_image = tsai3.UndistortImage(distort_image);
        std::vector<cv::Vec2d> projected_undistortion_points = tsai3.GetUndistortionProjectedPoints();
        for (size_t i = 0; i < projected_undistortion_points.size(); i++)
        {
            cv::drawMarker(undistored_image, cv::Point(projected_undistortion_points[i]), cv::Scalar::all(0));
        }

        std::vector<cv::Vec2d> undistored_points = tsai3.GetUndistortedPoints();
        for (size_t i = 0; i < undistored_points.size(); i++)
        {
            cv::drawMarker(undistored_image, cv::Point(undistored_points[i]), cv::Scalar(255, 0, 0), cv::MarkerTypes::MARKER_SQUARE);
        }
        cv::imwrite("undistort_image_tsai3.png", undistored_image);
    }

    
    if (1)
    {
        std::vector<cv::Vec3d> inner3D;
        std::vector<cv::Vec2d> inner2D;

        std::vector<int> innerIndex = { 24,25,26,33,34,35,42,43,44,69,70,71,72,73,74,75 };
        for (const auto i : innerIndex)
        {
            inner3D.push_back(points3D[i]);
            inner2D.push_back(points2D[i]);
        }


        TsaiCalibration tsai5;
        tsai5.SetImageSize(image_w, image_h);
        tsai5.Setf(f);
        tsai5.SetPoints3D(points3D);
        tsai5.SetPoints2D(points2D);

        tsai5.SetInnerPoints3D(inner3D);
        tsai5.SetInnerPoints2D(inner2D);

        if (!tsai5.Execute(TsaiCalibration::FiveStepOptimization))
        {
            std::cout << "Errors when Five StepOptimization!" << std::endl;
            exit(-2);
        }
        double e = tsai5.GetProjectionError();
        std::cout << tsai5.GetCalibratedParameters() << std::endl;

        cv::Mat undistored_image = tsai5.UndistortImage(distort_image);
        std::vector<cv::Vec2d> projected_undistortion_points = tsai5.GetUndistortionProjectedPoints();
        for (size_t i = 0; i < projected_undistortion_points.size(); i++)
        {
            cv::drawMarker(undistored_image, cv::Point(projected_undistortion_points[i]), cv::Scalar::all(0));
        }

        std::vector<cv::Vec2d> undistored_points = tsai5.GetUndistortedPoints();
        for (size_t i = 0; i < undistored_points.size(); i++)
        {
            cv::drawMarker(undistored_image, cv::Point(undistored_points[i]), cv::Scalar(255, 0, 0), cv::MarkerTypes::MARKER_SQUARE);
        }
        cv::imwrite("undistort_image_tsai5.png", undistored_image);
    }


    
}